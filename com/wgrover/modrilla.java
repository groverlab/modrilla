/*
 * modrilla.java
 *
 * Created on July 13, 2007, 8:53 PM
 */

// FIXME fix gd plot eventually
// FIXME fix bad use of if(a=="foo") for string equivalency checking, replace with if(a.equals("foo"))

package com.wgrover;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Date;
import javax.swing.ImageIcon;

/**
 *
 * @author  wgrover
 */
public class modrilla extends javax.swing.JFrame {
    
    /** Creates new form modrilla */
    public modrilla() {
        initComponents();
        previousButton.setEnabled(false);
        nextButton.setEnabled(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jFileChooser1 = new javax.swing.JFileChooser();
        aboutDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        joggerDialog = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        copyYButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        xLabel = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        copyXButton = new javax.swing.JButton();
        speedCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        plusYButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        minusXButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        plusXButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        minusYButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        plotDialog = new javax.swing.JDialog();
        inputPlot = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        setupPanel = new javax.swing.JPanel();
        alignmentModeLabel = new javax.swing.JLabel();
        alignmentModeCombo = new javax.swing.JComboBox();
        unitsLabel = new javax.swing.JLabel();
        unitsCombo = new javax.swing.JComboBox();
        outputLabel = new javax.swing.JLabel();
        outputCombo = new javax.swing.JComboBox();
        aboutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        setupEditorPane = new javax.swing.JEditorPane();
        millSetupPanel = new javax.swing.JPanel();
        millUnitsLabel = new javax.swing.JLabel();
        millUnitsCombo = new javax.swing.JComboBox();
        jScrollPane10 = new javax.swing.JScrollPane();
        jEditorPane5 = new javax.swing.JEditorPane();
        drillNickPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        zNickWhenDrilledUnitsLabel = new javax.swing.JLabel();
        zNickWhenDrilledField = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        yNickWhenDrilledField = new javax.swing.JTextField();
        yNickWhenDrilledUnitsLabel = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        xNickWhenDrilledField = new javax.swing.JTextField();
        xNickWhenDrilledUnitsLabel = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jEditorPane3 = new javax.swing.JEditorPane();
        alignToNickPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        xNickInCrosshairField = new javax.swing.JTextField();
        xNickInCrosshairUnitsLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        yNickInCrosshairUnitsLabel = new javax.swing.JLabel();
        yNickInCrosshairField = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        jEditorPane4 = new javax.swing.JEditorPane();
        DXFmarksPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        xDXFa1Field = new javax.swing.JTextField();
        xDXFa1UnitsLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        yDXFa1Field = new javax.swing.JTextField();
        yDXFa1UnitsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dxfMarksEditorPane = new javax.swing.JEditorPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        xDXFa1Field1 = new javax.swing.JTextField();
        xDXFa1UnitsLabel1 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        yDXFa1Field1 = new javax.swing.JTextField();
        yDXFa1UnitsLabel1 = new javax.swing.JLabel();
        millMarksPanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        xMODa1Label = new javax.swing.JLabel();
        xMODa1Field = new javax.swing.JTextField();
        xMODa1UnitsLabel = new javax.swing.JLabel();
        yMODa1Label = new javax.swing.JLabel();
        yMODa1Field = new javax.swing.JTextField();
        yMODa1UnitsLabel = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        xMODa2Label = new javax.swing.JLabel();
        xMODa2Field = new javax.swing.JTextField();
        xMODa2UnitsLabel = new javax.swing.JLabel();
        yMODa2Label = new javax.swing.JLabel();
        yMODa2Field = new javax.swing.JTextField();
        yMODa2UnitsLabel = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        millMarksEditorPane = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        zSurfaceLabel = new javax.swing.JLabel();
        zSurfaceUnitsLabel = new javax.swing.JLabel();
        zSurfaceField = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        drillNickEditorPane = new javax.swing.JEditorPane();
        jPanel11 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        waferThicknessField = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        overdrillField = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        peckDistanceField = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        zSpeedField = new javax.swing.JTextField();
        zSpeedUnitsLabel = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        repeatsField = new javax.swing.JTextField();
        serialDeviceLabel = new javax.swing.JLabel();
        serialDeviceField = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        zDrillSpeedField = new javax.swing.JTextField();
        zDrillSpeedUnitsLabel = new javax.swing.JLabel();
        fooLabel = new javax.swing.JLabel();
        zDrillSpeedUnitsCombo = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        optionsEditorPane = new javax.swing.JEditorPane();
        jPanel13 = new javax.swing.JPanel();
        selectInputFileButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        inputFileTextArea = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jEditorPane9 = new javax.swing.JEditorPane();
        jPanel12 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();

        jEditorPane1.setContentType("text/html");
        jEditorPane1.setEditable(false);
        jEditorPane1.setText("<html>\n\n<h1>Modrilla v2.0</h1>\n\nCopyright &#169; 2007 Will Grover.  <tt>http://wgrover.com/modrilla</tt>\n\n<blockquote><p>Based in part on <b>dxf2fgc</b> copyright &#169; 2007 Will Grover.  <tt>http://wgrover.com/dxf2fgc</tt>\n\n<p>Based in part on <b>cam.py</b> copyright &#169; 2006 Neil Gershenfeld, Massachusetts Institute of Technology.  Permission granted for experimental and personal use; license for commercial sale available from MIT. <tt>http://cba.mit.edu/~neilg/fab/dist</tt>\n</blockquote>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n</html>");
        jScrollPane1.setViewportView(jEditorPane1);

        org.jdesktop.layout.GroupLayout aboutDialogLayout = new org.jdesktop.layout.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        joggerDialog.getContentPane().setLayout(new java.awt.GridLayout(2, 1));

        joggerDialog.setAlwaysOnTop(true);
        copyYButton.setText("Copy to clipboard");
        copyYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyYButtonActionPerformed(evt);
            }
        });

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("units");

        yLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        yLabel.setText("0");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Y:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("X:");

        xLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xLabel.setText("0");

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("units");

        copyXButton.setText("Copy to clipboard");
        copyXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyXButtonActionPerformed(evt);
            }
        });

        speedCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Slow", "Fast" }));
        speedCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedComboActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Speed:");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(speedCombo, 0, 159, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(copyXButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(copyYButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(speedCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(xLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(copyXButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(yLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(copyYButton))
                .addContainerGap())
        );
        joggerDialog.getContentPane().add(jPanel4);

        jPanel3.setLayout(new java.awt.GridLayout(3, 3));

        jPanel3.add(jLabel9);

        plusYButton.setText("\u2191");
        plusYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusYButtonActionPerformed(evt);
            }
        });

        jPanel3.add(plusYButton);

        jPanel3.add(jLabel13);

        minusXButton.setText("\u2190");
        minusXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusXButtonActionPerformed(evt);
            }
        });

        jPanel3.add(minusXButton);

        jPanel3.add(jLabel11);

        plusXButton.setText("\u2192");
        plusXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusXButtonActionPerformed(evt);
            }
        });

        jPanel3.add(plusXButton);

        jPanel3.add(jLabel15);

        minusYButton.setText("\u2193");
        minusYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusYButtonActionPerformed(evt);
            }
        });

        jPanel3.add(minusYButton);

        joggerDialog.getContentPane().add(jPanel3);

        jLabel5.setText("jLabel5");
        inputPlot.setBackground(new java.awt.Color(255, 255, 255));
        inputPlot.setOpaque(true);

        org.jdesktop.layout.GroupLayout plotDialogLayout = new org.jdesktop.layout.GroupLayout(plotDialog.getContentPane());
        plotDialog.getContentPane().setLayout(plotDialogLayout);
        plotDialogLayout.setHorizontalGroup(
            plotDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(plotDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(inputPlot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );
        plotDialogLayout.setVerticalGroup(
            plotDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(plotDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(inputPlot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modrilla");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        alignmentModeLabel.setText("Alignment mode:");

        alignmentModeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Drill bit alignment", "Microscope alignment" }));
        alignmentModeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignmentModeComboActionPerformed(evt);
            }
        });

        unitsLabel.setText("Input file units:");

        unitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Millimeters", "Microns", "Centimeters", "Inches", "Mils", "Mill units" }));
        unitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitsComboActionPerformed(evt);
            }
        });

        outputLabel.setText("Output file format:");

        outputCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "G-code", "Roland Modela" }));
        outputCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputComboActionPerformed(evt);
            }
        });

        aboutButton.setText("About modrilla...");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Input file format:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DXF" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        setupEditorPane.setContentType("text/html");
        setupEditorPane.setEditable(false);
        setupEditorPane.setText("<html>\n\n<b>Welcome to Modrilla,</b> software for drilling glass microfluidic devices.  Modrilla reads in a DXF CAD file containing circles at the locations where you want to drill holes, and it creates a file that can be read by your mill or rapid prototyper to perform the drilling.  Each step of the conversion process is explained briefly in this text box.  For complete instructions, read the Modrilla documentation at <tt>http://openwetware.org/wiki/Modrilla</tt> .\n\n<p><b>Alignment mode:</b>In <u>Drill bit alignment</u>, the drill bit is aligned to two alignment marks on the glass.  In <u>Microscope alignment</u>, two alignment marks on the glass are sighted through an optional microscope mounted on your mill (NOT YET FULLY IMPLEMENTED).\n    \n<p><b>Input file format:</b>  Currently only the DXF file format is suported.  The DXF file can come from programs like AutoCAD, Adobe Illustrator, FreeCAD, etc.\n\n<p><b>Input file units:</b>  Pick the units for the input DXF file -- one unit in the DXF file equals one millimeter, centimeter, inch...?\n\n<p><b>Output file format:</b>  <u>G-code</u> is a standard programming language for CNC mills.  The option <u>Roland Modela</u> creates a shell script for drilling on a Roland Modela rapid prototyper.\n\n</html>");
        jScrollPane3.setViewportView(setupEditorPane);

        org.jdesktop.layout.GroupLayout setupPanelLayout = new org.jdesktop.layout.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(setupPanelLayout.createSequentialGroup()
                        .add(unitsLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(unitsCombo, 0, 261, Short.MAX_VALUE))
                    .add(setupPanelLayout.createSequentialGroup()
                        .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, setupPanelLayout.createSequentialGroup()
                                .add(outputLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(outputCombo, 0, 244, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, setupPanelLayout.createSequentialGroup()
                                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(alignmentModeLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(alignmentModeCombo, 0, 252, Short.MAX_VALUE)
                                    .add(jComboBox2, 0, 252, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, aboutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(alignmentModeLabel)
                    .add(alignmentModeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(unitsLabel)
                    .add(unitsCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(outputLabel)
                    .add(outputCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(aboutButton)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Setup", setupPanel);

        millUnitsLabel.setText("Mill units:");

        millUnitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Millimeters", "Microns", "Inches", "Mils", "Modela units" }));
        millUnitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                millUnitsComboActionPerformed(evt);
            }
        });

        jEditorPane5.setContentType("text/html");
        jEditorPane5.setEditable(false);
        jEditorPane5.setText("<html>\n\n<b>Mill units:</b>  Select the units of your mill, probably either <u>inches</u> for a Standard mill or <u>millimeters</u> for a Metric one.  If you selected \"Roland Modela\" output in the previous step, <u>Modela units</u> will be selected for you here.\n\n</htm>");
        jScrollPane10.setViewportView(jEditorPane5);

        org.jdesktop.layout.GroupLayout millSetupPanelLayout = new org.jdesktop.layout.GroupLayout(millSetupPanel);
        millSetupPanel.setLayout(millSetupPanelLayout);
        millSetupPanelLayout.setHorizontalGroup(
            millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(millSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(millSetupPanelLayout.createSequentialGroup()
                        .add(millUnitsLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(millUnitsCombo, 0, 290, Short.MAX_VALUE)))
                .addContainerGap())
        );
        millSetupPanelLayout.setVerticalGroup(
            millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, millSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(millSetupPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(millUnitsLabel)
                    .add(millUnitsCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Mill setup", millSetupPanel);

        jLabel8.setText("Z:");

        zNickWhenDrilledUnitsLabel.setText("millimeters");

        zNickWhenDrilledField.setText("45");

        jLabel41.setText("Y:");

        yNickWhenDrilledField.setText("34");

        yNickWhenDrilledUnitsLabel.setText("millimeters");

        jLabel47.setText("X:");

        xNickWhenDrilledField.setText("23");

        xNickWhenDrilledUnitsLabel.setText("millimeters");

        jEditorPane3.setContentType("text/html");
        jEditorPane3.setText("<html>\n\n<p><b>Microscope alignment is not fully implemented.</b>\n\n</html>");
        jScrollPane11.setViewportView(jEditorPane3);

        org.jdesktop.layout.GroupLayout drillNickPanelLayout = new org.jdesktop.layout.GroupLayout(drillNickPanel);
        drillNickPanel.setLayout(drillNickPanelLayout);
        drillNickPanelLayout.setHorizontalGroup(
            drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(drillNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(drillNickPanelLayout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zNickWhenDrilledField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zNickWhenDrilledUnitsLabel))
                    .add(drillNickPanelLayout.createSequentialGroup()
                        .add(jLabel41)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickWhenDrilledField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickWhenDrilledUnitsLabel))
                    .add(drillNickPanelLayout.createSequentialGroup()
                        .add(jLabel47)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickWhenDrilledField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickWhenDrilledUnitsLabel)))
                .addContainerGap())
        );
        drillNickPanelLayout.setVerticalGroup(
            drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, drillNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel47)
                    .add(xNickWhenDrilledUnitsLabel)
                    .add(xNickWhenDrilledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel41)
                    .add(yNickWhenDrilledUnitsLabel)
                    .add(yNickWhenDrilledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(drillNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(zNickWhenDrilledUnitsLabel)
                    .add(zNickWhenDrilledField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Drill nick", drillNickPanel);

        jLabel10.setText("X:");

        xNickInCrosshairField.setText("87");

        xNickInCrosshairUnitsLabel.setText("millimeters");

        jLabel12.setText("Y:");

        yNickInCrosshairUnitsLabel.setText("millimeters");

        yNickInCrosshairField.setText("76");

        jEditorPane4.setContentType("text/html");
        jEditorPane4.setEditable(false);
        jEditorPane4.setText("<html>\n\n<p><b>Microscope alignment is not fully implemented.</b>\n\n</html>");
        jScrollPane12.setViewportView(jEditorPane4);

        org.jdesktop.layout.GroupLayout alignToNickPanelLayout = new org.jdesktop.layout.GroupLayout(alignToNickPanel);
        alignToNickPanel.setLayout(alignToNickPanelLayout);
        alignToNickPanelLayout.setHorizontalGroup(
            alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(alignToNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(alignToNickPanelLayout.createSequentialGroup()
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickInCrosshairField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xNickInCrosshairUnitsLabel))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, alignToNickPanelLayout.createSequentialGroup()
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickInCrosshairField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yNickInCrosshairUnitsLabel)))
                .addContainerGap())
        );
        alignToNickPanelLayout.setVerticalGroup(
            alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, alignToNickPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(xNickInCrosshairUnitsLabel)
                    .add(xNickInCrosshairField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alignToNickPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(yNickInCrosshairUnitsLabel)
                    .add(yNickInCrosshairField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Align nick", alignToNickPanel);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("First alignment mark"));
        jLabel14.setText("X:");

        xDXFa1UnitsLabel.setText("millimeters");

        jLabel16.setText("Y:");

        yDXFa1UnitsLabel.setText("millimeters");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xDXFa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xDXFa1UnitsLabel))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jLabel16)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yDXFa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yDXFa1UnitsLabel)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(xDXFa1UnitsLabel)
                    .add(xDXFa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(yDXFa1UnitsLabel)
                    .add(yDXFa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        dxfMarksEditorPane.setContentType("text/html");
        dxfMarksEditorPane.setEditable(false);
        dxfMarksEditorPane.setText("<html>\n\n<b>Enter the DXF file coordinates of the first (leftmost) alignment mark.</b>\n\n<p>If you don't know these coordinates, open your DXF file in AutoCAD, Adobe Illustrator, etc., locate the leftmost alignment mark, and read off the coordiantes of the mark.  Enter those coordinates below.\n\n<p>If the units below are not the same as the units of your DXF file, click \"Previous step\" to go back to the \"Setup\" step and enter the correct units at \"DXF file units.\"\n\n</html>");
        jScrollPane2.setViewportView(dxfMarksEditorPane);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Second alignment mark (not necessary for this step)"));
        jPanel8.setEnabled(false);
        jLabel17.setText("X:");
        jLabel17.setEnabled(false);

        xDXFa1Field1.setEnabled(false);

        xDXFa1UnitsLabel1.setText("millimeters");
        xDXFa1UnitsLabel1.setEnabled(false);

        jLabel20.setText("Y:");
        jLabel20.setEnabled(false);

        yDXFa1Field1.setEnabled(false);

        yDXFa1UnitsLabel1.setText("millimeters");
        yDXFa1UnitsLabel1.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jLabel17)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xDXFa1Field1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xDXFa1UnitsLabel1))
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jLabel20)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yDXFa1Field1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yDXFa1UnitsLabel1)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(xDXFa1UnitsLabel1)
                    .add(xDXFa1Field1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel20)
                    .add(yDXFa1UnitsLabel1)
                    .add(yDXFa1Field1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        org.jdesktop.layout.GroupLayout DXFmarksPanelLayout = new org.jdesktop.layout.GroupLayout(DXFmarksPanel);
        DXFmarksPanel.setLayout(DXFmarksPanelLayout);
        DXFmarksPanelLayout.setHorizontalGroup(
            DXFmarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DXFmarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DXFmarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        DXFmarksPanelLayout.setVerticalGroup(
            DXFmarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DXFmarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("DXF marks", DXFmarksPanel);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("First alignment mark"));
        xMODa1Label.setText("X:");

        xMODa1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xMODa1FieldActionPerformed(evt);
            }
        });

        xMODa1UnitsLabel.setText("millimeters");

        yMODa1Label.setText("Y:");

        yMODa1UnitsLabel.setText("millimeters");

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(xMODa1Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa1UnitsLabel))
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(yMODa1Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa1UnitsLabel)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(xMODa1Label)
                    .add(xMODa1UnitsLabel)
                    .add(xMODa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yMODa1Label)
                    .add(yMODa1UnitsLabel)
                    .add(yMODa1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Second alignment mark"));
        xMODa2Label.setText("X:");

        xMODa2UnitsLabel.setText("millimeters");

        yMODa2Label.setText("Y:");

        yMODa2UnitsLabel.setText("millimeters");

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(xMODa2Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa2Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xMODa2UnitsLabel))
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(yMODa2Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa2Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yMODa2UnitsLabel)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(xMODa2Label)
                    .add(xMODa2UnitsLabel)
                    .add(xMODa2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(yMODa2Label)
                    .add(yMODa2UnitsLabel)
                    .add(yMODa2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        millMarksEditorPane.setContentType("text/html");
        millMarksEditorPane.setEditable(false);
        millMarksEditorPane.setText("<html>\n\n<b>Move the drill bit directly above the first (leftmost) alignment mark, read off the coordinates from the mill, and enter them below under <u>First alignment mark</u>.  Then move the drill bit directly above the second (rightmost) alignment mark and enter the mill coordinates under <u>Second alignment mark</u>.</b>\n\n<p>If the units below are not the same as the units of your DXF file, click \"Previous step\" to go back to the \"Setup\" step and enter the correct units at \"DXF file units.\"\n\n</html>");
        jScrollPane8.setViewportView(millMarksEditorPane);

        org.jdesktop.layout.GroupLayout millMarksPanelLayout = new org.jdesktop.layout.GroupLayout(millMarksPanel);
        millMarksPanel.setLayout(millMarksPanelLayout);
        millMarksPanelLayout.setHorizontalGroup(
            millMarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(millMarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(millMarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        millMarksPanelLayout.setVerticalGroup(
            millMarksPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, millMarksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(53, 53, 53))
        );
        jTabbedPane1.addTab("Mill marks", millMarksPanel);

        zSurfaceLabel.setText("Z:");

        zSurfaceUnitsLabel.setText("millimeters");

        drillNickEditorPane.setContentType("text/html");
        drillNickEditorPane.setEditable(false);
        drillNickEditorPane.setText("<html>\n\n<b>Move the drill bit above an area on your glass piece that won't be damaged when we make a small nick in the glass surface.  Place a drop of water on your glass piece beneath the bit, turn on the drilling motor, and slowly step the drill bit down in the Z dimension until the spinning bit barely contacts the surface of the glass.  Immediately turn off the drilling motor, leaving the drill bit in contact with the glass surface.  Read off the current Z coordinate from the mill and enter it below.</b>\n\n<p><b>If you are generating code for a Roland Modela,</b> leave the drill bit in contact with the glass surface and go on to the next step (don't enter any coordinates below).\n\n<p><b>Otherwise, raise the bit above the surface of the glass and go on to the next step.</b>\n\n</html>");
        jScrollPane9.setViewportView(drillNickEditorPane);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(zSurfaceLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSurfaceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSurfaceUnitsLabel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(zSurfaceLabel)
                    .add(zSurfaceUnitsLabel)
                    .add(zSurfaceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Drill nick", jPanel1);

        jLabel30.setText("Glass thickness:");

        waferThicknessField.setText("1100");

        jLabel31.setText("microns");

        jLabel32.setText("Overdrill:");

        overdrillField.setText("500");

        jLabel33.setText("microns");

        jLabel34.setText("Peck distance:");

        peckDistanceField.setText("100");

        jLabel35.setText("microns");

        jLabel36.setText("Non-drilling Z speed:");

        zSpeedField.setText("10");

        zSpeedUnitsLabel.setText("Mill speed units");

        jLabel38.setText("Repeats per peck:");

        repeatsField.setText("1");

        serialDeviceLabel.setText("Mill serial device:");
        serialDeviceLabel.setEnabled(false);

        serialDeviceField.setText("/dev/ttyS0");
        serialDeviceField.setEnabled(false);

        jLabel40.setText("Z drill speed:");

        zDrillSpeedField.setText("0.1");

        zDrillSpeedUnitsLabel.setText("Mill speed units");

        fooLabel.setText("Mill Z speed units:");

        zDrillSpeedUnitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mill speed units", "Modela units/sec" }));
        zDrillSpeedUnitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zDrillSpeedUnitsComboActionPerformed(evt);
            }
        });

        optionsEditorPane.setContentType("text/html");
        optionsEditorPane.setEditable(false);
        optionsEditorPane.setText("<html>\n\n<b>Mill Z speed units:</b>   <u>Mill speed units</u> means that you wil specify Z-axis (drilling) speeds in whatever are the default speed units for your mill, probably inches/minute or millimeters/minute.  Modrilla doesn't need to know the exact units.  Specify <u>Modrilla units/sec</u> if you are preparing a file for a Roland Modela.\n\n<p><b>Z drill speed:</b>  This is the slow speed at which the drill bit will be lowered during drilling, usually around 0.1 inches/minute, 2.54 millimeters/minute, or 0.01 Modrilla units/second.\n\n<p><b>Glass thickness</b> is the thickness of your \"good\" piece of glass, in microns.\n\n<p><b>Overdrill</b> is the distance to drill past the backside of the \"good\" piece of glass and into the \"bad\" backing piece of glass. The default value of 500 microns is usually OK. Be sure that your \"bad\" backing wafer is thicker than the <i>Overdrill</i> depth!\n\n<p><b>Peck depth</b> is the amount of glass removed per peck; the default 100 microns is usually OK.\n\n<p><b>Peck distance,</b> the amount of glass removed per peck, should be 100 microns or less.\n\n<p><b>Non-drilling Z speed</b> is the fast speed at which the drill bit is raised or lowered during non-drilling motions, usually around 10 inches/minute, 25.4 millimeters/minute, or 10 Modrilla units/second.\n\n<p><b>Repeats per peck</b> is the number of times each peck is repeated before moving on to the next depth.  This should remain at \"1\" unless bending or looseness in the mill mechanism necessitates repeated pecks.  For the Roland Modela, set <i>Repeats per peck</i> to 3.\n\n<p><b>Mill serial device</b> is the full path to the Linux serial device to which the Roland Modela is connected.\n\n</html>");
        jScrollPane4.setViewportView(optionsEditorPane);

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(serialDeviceLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(serialDeviceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel38)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(repeatsField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel36)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSpeedField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zSpeedUnitsLabel))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel34)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(peckDistanceField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel35))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel32)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(overdrillField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel33))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(jLabel30)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(waferThicknessField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel31))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                        .add(fooLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zDrillSpeedUnitsCombo, 0, 249, Short.MAX_VALUE))
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jLabel40)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zDrillSpeedField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(zDrillSpeedUnitsLabel)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fooLabel)
                    .add(zDrillSpeedUnitsCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel40)
                    .add(zDrillSpeedUnitsLabel)
                    .add(zDrillSpeedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel30)
                    .add(jLabel31)
                    .add(waferThicknessField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel32)
                    .add(jLabel33)
                    .add(overdrillField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel34)
                    .add(jLabel35)
                    .add(peckDistanceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel36)
                    .add(zSpeedUnitsLabel)
                    .add(zSpeedField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(repeatsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(serialDeviceLabel)
                    .add(serialDeviceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("Options", jPanel11);

        selectInputFileButton.setText("Select DXF file...");
        selectInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputFileButtonActionPerformed(evt);
            }
        });

        inputFileTextArea.setColumns(20);
        inputFileTextArea.setLineWrap(true);
        inputFileTextArea.setRows(5);
        inputFileTextArea.setText("no file selected");
        jScrollPane7.setViewportView(inputFileTextArea);

        jEditorPane9.setContentType("text/html");
        jEditorPane9.setEditable(false);
        jEditorPane9.setText("<html>\n\n<b>Click <u>Select DXF file</u> and select your input DXF file.</b>\n\n<p><b>Modrilla will create a new G-code or Modela file in the same directory as the input DXF file.</b>\n\n</html>");
        jScrollPane5.setViewportView(jEditorPane9);

        org.jdesktop.layout.GroupLayout jPanel13Layout = new org.jdesktop.layout.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, selectInputFileButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectInputFileButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Input file", jPanel13);

        jButton1.setText("Plot input file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Plot output file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jEditorPane2.setContentType("text/html");
        jEditorPane2.setText("<html>\n<b>Click the buttons below to review the hole locations in the input and output files (NOT FULLY IMPLEMENTED).</b>\n</html>");
        jScrollPane6.setViewportView(jEditorPane2);

        org.jdesktop.layout.GroupLayout jPanel12Layout = new org.jdesktop.layout.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton3)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Plot", jPanel12);

        nextButton.setText("Next  step \u2192");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("\u2190 Previous step");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(previousButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 155, Short.MAX_VALUE)
                        .add(nextButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 439, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previousButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void copyYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyYButtonActionPerformed
        StringSelection ss = new StringSelection(yLabel.getText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);
    }//GEN-LAST:event_copyYButtonActionPerformed
    
    private void copyXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyXButtonActionPerformed
        StringSelection ss = new StringSelection(xLabel.getText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);
    }//GEN-LAST:event_copyXButtonActionPerformed
    
    private void unitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitsComboActionPerformed
        xDXFa1UnitsLabel.setText(unitsCombo.getSelectedItem().toString().toLowerCase());
        yDXFa1UnitsLabel.setText(unitsCombo.getSelectedItem().toString().toLowerCase());
    }//GEN-LAST:event_unitsComboActionPerformed
    
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    private void minusYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusYButtonActionPerformed

        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,-5;' > " + serialDeviceField.getText()});
                y = y - 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,-100;' > " + serialDeviceField.getText()});
                y = y - 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_minusYButtonActionPerformed
    
    private void plusYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusYButtonActionPerformed

        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,5;' > " + serialDeviceField.getText()});
                y = y + 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD0,100;' > " + serialDeviceField.getText()});
                y = y + 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_plusYButtonActionPerformed
    
    private void minusXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusXButtonActionPerformed

        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD-5,0;' > " + serialDeviceField.getText()});
                x = x - 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD-100,0;' > " + serialDeviceField.getText()});
                x = x - 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_minusXButtonActionPerformed
    
    private void plusXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusXButtonActionPerformed
        try {
            if (speedCombo.getSelectedItem() == "Slow") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD5,0;' > " + serialDeviceField.getText()});
                x = x + 5;
            } else if (speedCombo.getSelectedItem() == "Fast") {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '!PZ0,500;!MC0;PR;PD100,0;' > " + serialDeviceField.getText()});
                x = x + 100;
            }
            xLabel.setText(Integer.toString(x));
            yLabel.setText(Integer.toString(y));
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_plusXButtonActionPerformed
    
    private void speedComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedComboActionPerformed
    }//GEN-LAST:event_speedComboActionPerformed
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        
        
        
        
        
        // general startup code:
        
        
        
        
        setupEditorPane.setCaretPosition(0);
        dxfMarksEditorPane.setCaretPosition(0);
        millMarksEditorPane.setCaretPosition(0);
        drillNickEditorPane.setCaretPosition(0);
        optionsEditorPane.setCaretPosition(0);
        
        
        jTabbedPane1.setEnabledAt(2, false);
        jTabbedPane1.setEnabledAt(3, false);
        joggerDialog.setSize(301, 301);
        joggerDialog.setTitle("Modela jogger");
        
        aboutDialog.setSize(500,500);
        plotDialog.setSize(500,500);
        
        
        
//
//        // XML experiments:
//        try {
//
//            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
//            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
//            Document doc = docBuilder.parse(new File("modrilla.xml"));
//
//            // normalize text representation
//            doc.getDocumentElement().normalize();
//            System.out.println("Root element of the doc is " +
//                    doc.getDocumentElement().getNodeName());
//
//
//            NodeList listOfPersons = doc.getElementsByTagName("person");
//            int totalPersons = listOfPersons.getLength();
//            System.out.println("Total no of people : " + totalPersons);
//
//            for(int s=0; s<listOfPersons.getLength() ; s++){
//
//
//                Node firstPersonNode = listOfPersons.item(s);
//                if(firstPersonNode.getNodeType() == Node.ELEMENT_NODE){
//
//
//                    Element firstPersonElement = (Element)firstPersonNode;
//
//                    //-------
//                    NodeList firstNameList = firstPersonElement.getElementsByTagName("first");
//                    Element firstNameElement = (Element)firstNameList.item(0);
//
//                    NodeList textFNList = firstNameElement.getChildNodes();
//                    System.out.println("First Name : " +
//                            ((Node)textFNList.item(0)).getNodeValue().trim());
//
//                    //-------
//                    NodeList lastNameList = firstPersonElement.getElementsByTagName("last");
//                    Element lastNameElement = (Element)lastNameList.item(0);
//
//                    NodeList textLNList = lastNameElement.getChildNodes();
//                    System.out.println("Last Name : " + ((Node)textLNList.item(0)).getNodeValue().trim());
//
//
//
//                    // my additions: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//                    if(((Node)textFNList.item(0)).getNodeValue().trim().equals("aboutModrilla")) {
//                        aboutButton.setText(((Node)textLNList.item(0)).getNodeValue().trim());
//                    }
//                    //if(((Node)textFNList.item(0)).getNodeValue().trim().equals("setupEditorPane")) {
//                    //    setupEditorPane.setText(((Node)textLNList.item(0)).getNodeValue().trim());
//                    //}
//                    //------
//
//
//
//
//
//                }//end of if clause
//
//
//            }//end of for loop with s var
//
//
//        } catch (SAXParseException err) {
//            System.out.println("** Parsing error" + ", line "
//                    + err.getLineNumber() + ", uri " + err.getSystemId());
//            System.out.println(" " + err.getMessage());
//
//        } catch (SAXException e) {
//            Exception x = e.getException();
//            ((x == null) ? e : x).printStackTrace();
//
//        } catch (Throwable t) {
//            t.printStackTrace();
//        }
//
//
//
//
//
//
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_formWindowOpened
    
    private void alignmentModeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignmentModeComboActionPerformed
        if (alignmentModeCombo.getSelectedItem() == "Drill bit alignment") {
            jTabbedPane1.setEnabledAt(2, false);
            jTabbedPane1.setEnabledAt(3, false);
            jTabbedPane1.setEnabledAt(6, true);
        } else if (alignmentModeCombo.getSelectedItem() == "Microscope alignment") {
            jTabbedPane1.setEnabledAt(2, true);
            jTabbedPane1.setEnabledAt(3, true);
            jTabbedPane1.setEnabledAt(6, false);
        }
    }//GEN-LAST:event_alignmentModeComboActionPerformed
    
    private void millUnitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_millUnitsComboActionPerformed
        xNickWhenDrilledUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yNickWhenDrilledUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        zNickWhenDrilledUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        xNickInCrosshairUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yNickInCrosshairUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        xMODa1UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yMODa1UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        xMODa2UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        yMODa2UnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        zSurfaceUnitsLabel.setText(millUnitsCombo.getSelectedItem().toString().toLowerCase());
        
    }//GEN-LAST:event_millUnitsComboActionPerformed
    
    private void outputComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputComboActionPerformed
        if (outputCombo.getSelectedItem() == "G-code") {
            serialDeviceLabel.setEnabled(false);
            serialDeviceField.setEnabled(false);
            millUnitsCombo.setSelectedItem("Millimeters");
            millUnitsCombo.setEnabled(true);
            millUnitsLabel.setEnabled(true);
            zDrillSpeedUnitsCombo.setSelectedItem("Mill speed units");
            fooLabel.setEnabled(true);
            joggerDialog.setVisible(false);
            
            
            
            zSurfaceField.setEnabled(true);
            zSurfaceLabel.setEnabled(true);
            zSurfaceUnitsLabel.setEnabled(true);
            
        } else if (outputCombo.getSelectedItem() == "Roland Modela") {
            serialDeviceLabel.setEnabled(true);
            serialDeviceField.setEnabled(true);
            millUnitsCombo.setSelectedItem("Modela units");
            millUnitsCombo.setEnabled(false);
            millUnitsLabel.setEnabled(false);
            zDrillSpeedUnitsCombo.setSelectedItem("Modela units/sec");
            zDrillSpeedUnitsCombo.setEnabled(false);
            fooLabel.setEnabled(false);
            joggerDialog.setVisible(true);
            
            
            
            zSurfaceField.setEnabled(false);
            zSurfaceLabel.setEnabled(false);
            zSurfaceUnitsLabel.setEnabled(false);
        }
    }//GEN-LAST:event_outputComboActionPerformed
    
    private void zDrillSpeedUnitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zDrillSpeedUnitsComboActionPerformed
        zDrillSpeedUnitsLabel.setText(zDrillSpeedUnitsCombo.getSelectedItem().toString());
        zSpeedUnitsLabel.setText(zDrillSpeedUnitsCombo.getSelectedItem().toString());
    }//GEN-LAST:event_zDrillSpeedUnitsComboActionPerformed
    
    /**
     * 
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        plotDialog.setVisible(true);
        
        BufferedImage image2 = new BufferedImage(inputPlot.getWidth(), inputPlot.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics graphics2 = image2.getGraphics();
        
        graphics2.setColor(Color.BLACK);
        
        for (int h = 0; h <= holes; h++) {
            
            int xPlot = (int) (xMODholes[h] - xMODmin-0.05*(xMODmin-xMODmax));
            int yPlot = (int) (yMODholes[h] - yMODmin-0.05*(yMODmin-yMODmax));
            
            xPlot = (int) (xPlot*inputPlot.getWidth() /(1.1*(xMODmax-xMODmin)));
            yPlot = (int) (yPlot*inputPlot.getHeight()/(1.1*(yMODmax-yMODmin)));
            
            //System.out.println("("+xDXFholes[h]+", "+yDXFholes[h]+")   ("+xPlot+", "+yPlot+")");
            graphics2.fillOval(xPlot, yPlot, 5, 5);
        }
        
        graphics2.dispose();
        inputPlot.setIcon(new ImageIcon(image2));
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void xMODa1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xMODa1FieldActionPerformed
    }//GEN-LAST:event_xMODa1FieldActionPerformed
    
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        aboutDialog.setVisible(!aboutDialog.isVisible());
    }//GEN-LAST:event_aboutButtonActionPerformed
    
    private void selectInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectInputFileButtonActionPerformed
        jFileChooser1.showOpenDialog(this);
        inputFileTextArea.setText(jFileChooser1.getSelectedFile().toString());
        infile=jFileChooser1.getSelectedFile();
        
        
        
        
        // BIG PASTE STARTS HERE
        
        
        
        
        
        
        
        
        
        // define scaleFactor initially in terms of Modela units
        double scaleFactor=1;
        if(unitsCombo.getSelectedItem()=="Mill units") {
            scaleFactor = 1;
        } else if(unitsCombo.getSelectedItem()=="Mils") {
            scaleFactor = 0.984;
        } else if(unitsCombo.getSelectedItem()=="Inches") {
            scaleFactor = 0.000984;
        } else if(unitsCombo.getSelectedItem()=="Millimeters") {
            scaleFactor = 0.025;
        } else if(unitsCombo.getSelectedItem()=="Microns") {
            scaleFactor = 25.0;
        } else if(unitsCombo.getSelectedItem()=="Centimeters") {
            scaleFactor = 0.0025;
        }
        
        // if necessary, now convert from Modela units to Mill units
        if(millUnitsCombo.getSelectedItem()=="Modela units") {
            ;  //do nothing; scaleFactor is already in Modela units
        } else if(millUnitsCombo.getSelectedItem()=="Mils") {
            scaleFactor=scaleFactor/0.984;
        } else if(millUnitsCombo.getSelectedItem()=="Inches") {
            scaleFactor=scaleFactor/0.000984;
        } else if(millUnitsCombo.getSelectedItem()=="Millimeters") {
            scaleFactor=scaleFactor/0.025;
        } else if(millUnitsCombo.getSelectedItem()=="Microns") {
            scaleFactor=scaleFactor/25.0;
        } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
            scaleFactor=scaleFactor/0.0025;
        }
        
        
        //DXF coords are divided by scaleFactor
        double xDXFa1=Double.parseDouble(xDXFa1Field.getText())/scaleFactor;
        double yDXFa1=Double.parseDouble(yDXFa1Field.getText())/scaleFactor;
        //Coords from Mill are not scaled because they're already in the mill's units
        double xMODa1=Double.parseDouble(xMODa1Field.getText());
        double yMODa1=Double.parseDouble(yMODa1Field.getText());
        double xMODa2=Double.parseDouble(xMODa2Field.getText());
        double yMODa2=Double.parseDouble(yMODa2Field.getText());
        
        //Scale these as microns
        //double waferThickness=Double.parseDouble(waferThicknessField.getText())/25.0;
        //double overdrill=Double.parseDouble(overdrillField.getText())/25.0;
        //double peckDistance=Double.parseDouble(peckDistanceField.getText())/25.0;
        double waferThickness=0.0;
        double overdrill=0.0;
        double peckDistance=0.0;
        if(millUnitsCombo.getSelectedItem()=="Modela units") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/25.0;
            overdrill=Double.parseDouble(overdrillField.getText())/25.0;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/25.0;
        } else if(millUnitsCombo.getSelectedItem()=="Mils") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/25.4;
            overdrill=Double.parseDouble(overdrillField.getText())/25.4;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/25.4;
        } else if(millUnitsCombo.getSelectedItem()=="Inches") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/25400;
            overdrill=Double.parseDouble(overdrillField.getText())/25400;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/25400;
        } else if(millUnitsCombo.getSelectedItem()=="Millimeters") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/1000.0;
            overdrill=Double.parseDouble(overdrillField.getText())/1000.0;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/1000.0;
        } else if(millUnitsCombo.getSelectedItem()=="Microns") {
            waferThickness=Double.parseDouble(waferThicknessField.getText());
            overdrill=Double.parseDouble(overdrillField.getText());
            peckDistance=Double.parseDouble(peckDistanceField.getText());
        } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
            waferThickness=Double.parseDouble(waferThicknessField.getText())/10000.0;
            overdrill=Double.parseDouble(overdrillField.getText())/10000.0;
            peckDistance=Double.parseDouble(peckDistanceField.getText())/10000.0;
        }
        
        //speeds aren't scaled! assume mm/min for mill or mill units for modela
        double zSpeed=Double.parseDouble(zSpeedField.getText());
        double zDrillSpeed=Double.parseDouble(zDrillSpeedField.getText());
        
        int repeats=Integer.parseInt(repeatsField.getText());
        
        // these aren't read yet and must be scaled after reading from file
        double xDXF=0;
        double yDXF=0;
        double xMOD=0;
        double yMOD=0;
        
        
        try {
            FileReader fr = new FileReader(infile);
            BufferedReader in=new BufferedReader(fr);
            String outFileName="temp";
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                outFileName=infile.getParent()+File.separator+infile.getName()+".sh";
            }
            if(outputCombo.getSelectedItem()=="G-code") {
                outFileName=infile.getParent()+File.separator+infile.getName()+".ngc";
            }
            BufferedWriter out = new BufferedWriter(new FileWriter(outFileName));
            
            // START OF PREAMBLE
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                //make this a shell script
                out.write("#!/bin/sh\n");
            }
            
            //info lines
            
            Date d = new Date();
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                out.write("echo 'Running "+infile.getName()+".sh'\n");
                out.write("echo 'Generated "+d+" by Modrilla v2.0 by Will Grover'\n");
                out.write("echo 'http://wgrover.com/modrilla'\n");
            }
            
            if(outputCombo.getSelectedItem()=="G-code") {
                out.write("(Prepared from "+infile.getName()+")\n");
                out.write("(Generated "+d+" by Modrilla v2.0 by Will Grover)\n");
                out.write("(http://wgrover.com/modrilla)\n");
            }
            
            //stty command for Modela
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                out.write("stty 9600 raw -echo crtscts <"+serialDeviceField.getText()+"\n");
            }
            
            //head up and head down heights for Modela
            
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                //head down (z during PD) = 0 (at the top of the wafer)
                //head up (z during PU) = 500 (500 units above the top of the wafer)
                out.write("echo '!PZ0,500;!MC1;' > "+serialDeviceField.getText()+"\n");
            }
            
            //drilling feed rate for G-code
            
            if(outputCombo.getSelectedItem()=="G-code") {
                out.write("F"+zDrillSpeedField.getText()+"\n");
            }
            
            // END OF PREAMBLE
            
            String line;
            int circles=0;
            //scanmode 0: looking for "CIRCLE"
            //scanmode 1: looking for " 10" (DXFx)
            //scanmode 2: read x
            //scanmode 3: looking for " 20" (DXFy)
            //scanmode 4: read y and convert (DXFx,DXFy)
            int scanmode=0;
            while ((line=in.readLine())!=null) {
                
                if(scanmode==2) {
                    xDXF=Double.parseDouble(line)/scaleFactor;
                    scanmode=3;
                } else if(scanmode==4) {
                    yDXF=Double.parseDouble(line)/scaleFactor;
                    
                    //conversion math
                    
                    
                    
                    xMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF, yDXF)[0];
                    yMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF, yDXF)[1];
                    
                    // disabled Sign for now:
                    //                    xMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF*xSign, yDXF*ySign)[0];
                    //                    yMOD=xyMOD(xDXFa1, yDXFa1, xMODa1, yMODa1, xMODa2, yMODa2, xDXF*xSign, yDXF*ySign)[1];
                    
                    
                    //remember (xDXF,yDXF) and (xMOD,yMOD) for plotting later
                    xDXFholes[hole]=xDXF;
                    yDXFholes[hole]=-yDXF;
                    xMODholes[hole]=xMOD;
                    yMODholes[hole]=-yMOD;
                    holes=hole;
                    hole++;
                    
                    //if this is the first hole, then set MAX and MIN to these coordinates
                    if(holes==0) {
                        xDXFmax=xDXF;
                        xDXFmin=xDXF;
                        yDXFmax=-yDXF;
                        yDXFmin=-yDXF;
                        xMODmax=xMOD;
                        xMODmin=xMOD;
                        yMODmax=-yMOD;
                        yMODmin=-yMOD;
                    }
                    
                    //otherwise, check for new MAX and MIN coordinates
                    else {
                        //record new xDXFmax, xDXFmin, yDXFmax, and yDXFmin, if any
                        if(xDXF>xDXFmax) {xDXFmax=xDXF;}
                        if(xDXF<xDXFmin) {xDXFmin=xDXF;}
                        if(-yDXF>yDXFmax) {yDXFmax=-yDXF;}
                        if(-yDXF<yDXFmin) {yDXFmin=-yDXF;}
                        //added these minuses to fix plotting
                        
                        //record new xMODmax, xMODmin, yMODmax, and yMODmin, if any
                        if(xMOD>xMODmax) {xMODmax=xMOD;}
                        if(xMOD<xMODmin) {xMODmin=xMOD;}
                        if(-yMOD>yMODmax) {yMODmax=-yMOD;}
                        if(-yMOD<yMODmin) {yMODmin=-yMOD;}
                        //added these minuses to fix plotting
                    }
                    
                    
                    
                    
                    //report that we're drilling a hole at (xMOD,yMOD)
                    
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("\necho 'Drilling hole "+circles+" at ("+(int)xMOD+","+(int)yMOD+")'\n");
                    }
                    
                    if(outputCombo.getSelectedItem()=="G-code") {
                        ;       //can we put a (parenthetical comment) here?
                    }
                    
                    
                    
                    //consistent screw loading: move first to (xMOD-offset,yMOD-offset) absolute, head up
                    double offset=0;
                    if(millUnitsCombo.getSelectedItem()=="Modela units") {
                        offset = 100;
                    } else if(millUnitsCombo.getSelectedItem()=="Millimeters") {
                        offset = 3;
                    } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
                        offset = 0.3;
                    } else if(millUnitsCombo.getSelectedItem()=="Microns") {
                        offset = 300;
                    } else if(millUnitsCombo.getSelectedItem()=="Inches") {
                        offset = 0.2;
                    } else if(millUnitsCombo.getSelectedItem()=="Mils") {
                        offset = 100;
                    }
                    
                    double xMODapproach=xMOD-offset;
                    double yMODapproach=yMOD-offset;
                    
                    // move to approach
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("echo 'PA;PU"+(int)xMODapproach+","+(int)yMODapproach+";' > "+serialDeviceField.getText()+"\n");
                    }
                    if(outputCombo.getSelectedItem()=="G-code") {
                        out.write("G00 X"+floaty.format(xMODapproach)+" Y"+floaty.format(yMODapproach)+"\n"); 
                    }
                    
                    //now move to (xMOD,yMOD) absolute, head up
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("echo 'PA;PU"+(int)xMOD+","+(int)yMOD+";' > "+serialDeviceField.getText()+"\n");
                    }
                    if(outputCombo.getSelectedItem()=="G-code") {
                        out.write("G00 X"+floaty.format(xMOD)+" Y"+floaty.format(yMOD)+"\n");
                    }
                    
                    //drill by pecking, using RELATIVE coordinates in Z dimension
                    //lower quickly to wafer surface
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        out.write("echo 'PR;PD;' > "+serialDeviceField.getText()+"\n");
                    }
                    double depth=0;
                    if(outputCombo.getSelectedItem()=="Roland Modela") {
                        depth=0;
                    }
                    double zSurface=0;
                    double zCurrent=0;
                    if(outputCombo.getSelectedItem()=="G-code") {
                        zSurface=Double.parseDouble(zSurfaceField.getText());  //already in mill units
                        depth=0;
                        zCurrent=zSurface;
                    }
                    
                    while(depth<waferThickness+overdrill) {
                        
                        zCurrent=zSurface-depth;   // FIXME this assumes minus equals more depth
                        
                        int repeat=0;
                        
                        while(repeat<repeats) {
                            
                            
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("echo 'PR;");
                            }
                            
                            //lower quickly to previous drilled depth
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("!VZ"+zSpeed+";");
                                out.write("!ZM-"+(int)depth+";");
                            }
                            if(outputCombo.getSelectedItem()=="G-code") {
                                out.write("G00 Z"+floaty.format(zCurrent)+"\n");
                            }
                            
                            //lower slowly one additional peck
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("!VZ"+zDrillSpeed+";");
                                out.write("!ZM-"+(int)peckDistance+";");
                            }
                            if(outputCombo.getSelectedItem()=="G-code") {
                                double zCurrentMinusOnePeck=zCurrent-peckDistance;
                                out.write("G01 Z"+floaty.format(zCurrentMinusOnePeck)+"\n");
                            }
                            
                            //raise quickly to wafer surface
                            if(outputCombo.getSelectedItem()=="Roland Modela") {
                                out.write("!VZ"+zSpeed+";");
                                out.write("!ZM"+(int)peckDistance+";");
                                out.write("!ZM"+(int)depth+";' > "+serialDeviceField.getText()+"\n");
                            }
                            if(outputCombo.getSelectedItem()=="G-code") {
                                out.write("G00 Z"+floaty.format(zSurface)+"\n");
                            }
                            
                            //record new peck repeat
                            repeat=repeat+1;
                        }
                        //record new depth - this affects both Modela and G-code modes
                        depth=depth+peckDistance;
                    }
                    
                    //raise head to PU position before going to next hole
                    //I don't think this is doing anything...
                    //out.write("PU;");
                    
                    //but we must raise the head to a safe drilling height for G-code:
                    if(outputCombo.getSelectedItem()=="G-code") {
                        double zSafeDistance=0.2;   //default value for inches
                        if(millUnitsCombo.getSelectedItem()=="Millimeters") {
                            zSafeDistance = 3;
                        } else if(millUnitsCombo.getSelectedItem()=="Centimeters") {
                            zSafeDistance = 0.3;
                        } else if(millUnitsCombo.getSelectedItem()=="Microns") {
                            zSafeDistance = 300;
                        } else if(millUnitsCombo.getSelectedItem()=="Inches") {
                            zSafeDistance = 0.2;
                        } else if(millUnitsCombo.getSelectedItem()=="Mils") {
                            zSafeDistance = 100;
                        }
                        double zSafe=zSurface+zSafeDistance;
                        out.write("G00 Z"+floaty.format(zSafe)+"\n");
                    }
                    
                    //last thing, return to scanmode 0
                    scanmode=0;
                } else if(line.contains("CIRCLE")&&scanmode==0) {
                    scanmode=1; ++circles;
                } else if(line.contains(" 10")&&scanmode==1) {
                    scanmode=2;
                } else if(line.contains(" 20")&&scanmode==3) {
                    scanmode=4;
                }
            }
            //graceful shutdown
            if(outputCombo.getSelectedItem()=="Roland Modela") {
                out.write("echo 'PA;PU1000,1000;!MC0;' > "+serialDeviceField.getText()+"\n");
            }
            if(outputCombo.getSelectedItem()=="G-code") {
                out.write("M2\n");
            }
            
            //statusLabel.setText("Converted "+circles+" holes");
            
            out.close();
        } catch (IOException ioe) {}
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        // BIG PASTE ENDS HERE
        
        
    }//GEN-LAST:event_selectInputFileButtonActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        plotDialog.setVisible(true);
        
        BufferedImage image = new BufferedImage(inputPlot.getWidth(), inputPlot.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics graphics = image.getGraphics();
        
        graphics.setColor(Color.BLACK);
        
        for (int h = 0; h <= holes; h++) {
            
            int xPlot = (int) (xDXFholes[h] - xDXFmin-0.05*(xDXFmin-xDXFmax));
            int yPlot = (int) (yDXFholes[h] - yDXFmin-0.05*(yDXFmin-yDXFmax));
            
            xPlot = (int) (xPlot*inputPlot.getWidth() /(1.1*(xDXFmax-xDXFmin)));
            yPlot = (int) (yPlot*inputPlot.getHeight()/(1.1*(yDXFmax-yDXFmin)));
            
            //System.out.println("("+xDXFholes[h]+", "+yDXFholes[h]+")   ("+xPlot+", "+yPlot+")");
            graphics.fillOval(xPlot, yPlot, 5, 5);
        }
        
        graphics.dispose();
        inputPlot.setIcon(new ImageIcon(image));
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (jTabbedPane1.getSelectedIndex() == 0) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        if (jTabbedPane1.getSelectedIndex() == jTabbedPane1.getComponentCount() - 1) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged
    
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (jTabbedPane1.getSelectedIndex() > 0) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
        }
        while (!jTabbedPane1.isEnabledAt(jTabbedPane1.getSelectedIndex())) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
        }
        if (jTabbedPane1.getSelectedIndex() == 0) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        if (jTabbedPane1.getSelectedIndex() == jTabbedPane1.getComponentCount() - 1) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_previousButtonActionPerformed
    
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (jTabbedPane1.getSelectedIndex() < jTabbedPane1.getComponentCount() - 1) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
        }
        while (!jTabbedPane1.isEnabledAt(jTabbedPane1.getSelectedIndex())) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
        }
        if (jTabbedPane1.getSelectedIndex() == 0) {
            previousButton.setEnabled(false);
        } else {
            previousButton.setEnabled(true);
        }
        if (jTabbedPane1.getSelectedIndex() == jTabbedPane1.getComponentCount() - 1) {
            nextButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_nextButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modrilla().setVisible(true);
            }
        });
    }
    
    
    public static double [] xyMOD(double xDXFa1, double yDXFa1, double xMODa1, double yMODa1, double xMODa2, double yMODa2, double xDXF, double yDXF) {
        double fuzz=1.0;
        if(yDXF==yDXFa1) { yDXF=yDXF+fuzz; }
        if(xDXF==xDXFa1) { xDXF=xDXF+fuzz; }
        double theta=Math.atan( (yMODa2-yMODa1) / (xMODa2-xMODa1) );
        double phi=Math.atan( (yDXF-yDXFa1) / (xDXF-xDXFa1) );
        double r=(xDXF-xDXFa1)/Math.cos(phi);
        double xMOD=(r*Math.cos(theta+phi))+xMODa1;
        double yMOD=(r*Math.sin(theta+phi))+yMODa1;
        double [] xyMOD={xMOD,yMOD};
        return xyMOD;
    }
    
    
    
    // inty format (for Modela, other mills with whole-number coordinates)
    DecimalFormat inty = new DecimalFormat("##########");
    
    // floaty format
    DecimalFormat floaty = new DecimalFormat("####0.00000");
    
    
    File infile=null;
    
    
    double [] xDXFholes = new double [100];
    double [] yDXFholes = new double [100];
    double [] xMODholes = new double [100];
    double [] yMODholes = new double [100];
    private double xDXFmax=0.0;
    private double xDXFmin=0.0;
    private double yDXFmax=0.0;
    private double yDXFmin=0.0;
    private double xMODmax=0.0;
    private double xMODmin=0.0;
    private double yMODmax=0.0;
    private double yMODmin=0.0;
    private int holes=0;
    private int hole=0;
    
    private int x=0;
    private int y=0;
    
    private int xSign=1;
    private int ySign=1;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DXFmarksPanel;
    private javax.swing.JButton aboutButton;
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JPanel alignToNickPanel;
    private javax.swing.JComboBox alignmentModeCombo;
    private javax.swing.JLabel alignmentModeLabel;
    private javax.swing.JButton copyXButton;
    private javax.swing.JButton copyYButton;
    private javax.swing.JEditorPane drillNickEditorPane;
    private javax.swing.JPanel drillNickPanel;
    private javax.swing.JEditorPane dxfMarksEditorPane;
    private javax.swing.JLabel fooLabel;
    private javax.swing.JTextArea inputFileTextArea;
    private javax.swing.JLabel inputPlot;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JEditorPane jEditorPane3;
    private javax.swing.JEditorPane jEditorPane4;
    private javax.swing.JEditorPane jEditorPane5;
    private javax.swing.JEditorPane jEditorPane9;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JDialog joggerDialog;
    private javax.swing.JEditorPane millMarksEditorPane;
    private javax.swing.JPanel millMarksPanel;
    private javax.swing.JPanel millSetupPanel;
    private javax.swing.JComboBox millUnitsCombo;
    private javax.swing.JLabel millUnitsLabel;
    private javax.swing.JButton minusXButton;
    private javax.swing.JButton minusYButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JEditorPane optionsEditorPane;
    private javax.swing.JComboBox outputCombo;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextField overdrillField;
    private javax.swing.JTextField peckDistanceField;
    private javax.swing.JDialog plotDialog;
    private javax.swing.JButton plusXButton;
    private javax.swing.JButton plusYButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JTextField repeatsField;
    private javax.swing.JButton selectInputFileButton;
    private javax.swing.JTextField serialDeviceField;
    private javax.swing.JLabel serialDeviceLabel;
    private javax.swing.JEditorPane setupEditorPane;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JComboBox speedCombo;
    private javax.swing.JComboBox unitsCombo;
    private javax.swing.JLabel unitsLabel;
    private javax.swing.JTextField waferThicknessField;
    private javax.swing.JTextField xDXFa1Field;
    private javax.swing.JTextField xDXFa1Field1;
    private javax.swing.JLabel xDXFa1UnitsLabel;
    private javax.swing.JLabel xDXFa1UnitsLabel1;
    private javax.swing.JLabel xLabel;
    private javax.swing.JTextField xMODa1Field;
    private javax.swing.JLabel xMODa1Label;
    private javax.swing.JLabel xMODa1UnitsLabel;
    private javax.swing.JTextField xMODa2Field;
    private javax.swing.JLabel xMODa2Label;
    private javax.swing.JLabel xMODa2UnitsLabel;
    private javax.swing.JTextField xNickInCrosshairField;
    private javax.swing.JLabel xNickInCrosshairUnitsLabel;
    private javax.swing.JTextField xNickWhenDrilledField;
    private javax.swing.JLabel xNickWhenDrilledUnitsLabel;
    private javax.swing.JTextField yDXFa1Field;
    private javax.swing.JTextField yDXFa1Field1;
    private javax.swing.JLabel yDXFa1UnitsLabel;
    private javax.swing.JLabel yDXFa1UnitsLabel1;
    private javax.swing.JLabel yLabel;
    private javax.swing.JTextField yMODa1Field;
    private javax.swing.JLabel yMODa1Label;
    private javax.swing.JLabel yMODa1UnitsLabel;
    private javax.swing.JTextField yMODa2Field;
    private javax.swing.JLabel yMODa2Label;
    private javax.swing.JLabel yMODa2UnitsLabel;
    private javax.swing.JTextField yNickInCrosshairField;
    private javax.swing.JLabel yNickInCrosshairUnitsLabel;
    private javax.swing.JTextField yNickWhenDrilledField;
    private javax.swing.JLabel yNickWhenDrilledUnitsLabel;
    private javax.swing.JTextField zDrillSpeedField;
    private javax.swing.JComboBox zDrillSpeedUnitsCombo;
    private javax.swing.JLabel zDrillSpeedUnitsLabel;
    private javax.swing.JTextField zNickWhenDrilledField;
    private javax.swing.JLabel zNickWhenDrilledUnitsLabel;
    private javax.swing.JTextField zSpeedField;
    private javax.swing.JLabel zSpeedUnitsLabel;
    private javax.swing.JTextField zSurfaceField;
    private javax.swing.JLabel zSurfaceLabel;
    private javax.swing.JLabel zSurfaceUnitsLabel;
    // End of variables declaration//GEN-END:variables
    
}
